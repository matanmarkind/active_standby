[package]
name = "active_standby"
version = "0.6.3"
authors = ["Matan Markind <matan.markind@gmail.com>"]
edition = "2018"
license = "MIT OR Apache-2.0"
description = "A concurrency primitive for high concurrency reads with a single writer."
repository = "https://github.com/matanmarkind/active_standby"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
slab = "0.4.3"
more-asserts = "0.2.1"

[dev-dependencies]
maplit = "1.0.2"

[target.'cfg(loom)'.dependencies]
loom = "0.5.0"

# Next: Create AsLock, which is like RwLock and contains both Writer and Reader.
# Unimplement Send, and require users explicitly call 'make_send' which consumes
# self. And convert back with 'make_useful'. This will prevent users from
# sharing it between threads via Arc<AsLock>. Also it is templates on the Writer
# type (and Reader until we can derive reader type from Writer::new_reader).